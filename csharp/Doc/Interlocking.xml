<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Interlocking</name>
    </assembly>
    <members>
        <member name="T:Interlocking.Base.BaseController`3">
            <summary>
            웹API 컨트롤러용 부모클래스. C#쪽 추상클래스 네이밍룰 좀 고민해봐야 [TO-DO]
            XxxxAsync()류는 Task가 걸린경우가 많으니 함수명에서 명시
            추후 xxxControll이 추가될 경우, 가급적 해당 클래스에.
            </summary>
        </member>
        <member name="M:Interlocking.Base.BaseController`3.#ctor(Microsoft.Extensions.Logging.ILogger{`0})">
            <summary>
            웹API 컨트롤러용 부모클래스. C#쪽 추상클래스 네이밍룰 좀 고민해봐야 [TO-DO]
            XxxxAsync()류는 Task가 걸린경우가 많으니 함수명에서 명시
            추후 xxxControll이 추가될 경우, 가급적 해당 클래스에.
            </summary>
        </member>
        <member name="F:Interlocking.Base.BaseController`3._logger">
            <summary>
            컨트롤러의 로깅에 사용.
            </summary>
        </member>
        <member name="M:Interlocking.Base.BaseController`3.MakeResponse(`2)">
            <summary>
            리스폰스 생성. 다양한 HTTP 상태 코드때문에 IActionResult
            </summary>
        </member>
        <member name="M:Interlocking.Base.BaseController`3.GetAsync(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            HttpGet 리퀘스트.
            </summary>
            <returns>딕셔너리형 리퀘스트</returns>
        </member>
        <member name="M:Interlocking.Base.BaseController`3.PostAsync(`1)">
            <summary>
            HttpPost 리퀘스트.
            </summary>
            <param name="req">The request payload.</param>
            <returns>BaseRequestPacket 상속받은 리퀘스트</returns>
        </member>
        <member name="M:Interlocking.Base.BaseController`3.PostAsyncWithFiles(`1,Microsoft.AspNetCore.Http.IFormFile[])">
            <summary>
            HttpPost 리퀘스트 with 멀티폼 데이터
            </summary>
            <param name="req">The request payload.</param>
            <returns>BaseRequestPacket 상속받은 리퀘스트</returns>
        </member>
        <member name="M:Interlocking.Base.BaseController`3.PutAsync(`1)">
            <summary>
            HttpPut 리퀘스트.
            </summary>
            <param name="req">The request payload.</param>
            <returns>BaseRequestPacket 상속받은 리퀘스트</returns>
        </member>
        <member name="M:Interlocking.Base.BaseController`3.DeleteAsync(`1)">
            <summary>
            HttpDelete 리퀘스트.
            </summary>
            <param name="req">The request payload.</param>
            <returns>BaseRequestPacket 상속받은 리퀘스트</returns>
        </member>
        <member name="M:Interlocking.Base.BaseController`3.PatchAsync">
            <summary>
            HttpPatch 리퀘스트.
            </summary>
            <returns>BaseRequestPacket 상속받은 리퀘스트</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Interlocking.Base.IMongoMultipleDocument" -->
        <member name="T:Interlocking.Base.BaseException">
            <summary>
            HttpStatusCode.ServiceUnavailable(503)      서버 리소스쪽 일시적 불능(예. 부팅등 해당 리소스가 가동되기전)
            HttpStatusCode.InternalServerError(500)     서버사이트코드 에러 OR 트래픽폭발등 인프라쪽 지원 필요
            [수정.2025-05-18]
            </summary>
        </member>
        <member name="T:Interlocking.Base.BaseRequestPacket">
            <summary>
            URL에 파라미터를 넣어서 쓰는 GET, DELETE쪽과는 무관
            </summary>
        </member>
        <member name="T:Interlocking.Base.BaseResponsePacket">
            <summary>
            200.OK용 리스폰스와 익셉션용 리스폰스 부모.
            </summary>
        </member>
        <member name="T:Interlocking.Base.BaseService">
            <summary>
            MVC패턴 원칙상, 비즈니스 로직은 (최대한)서비스에서 해결해야 하고
            클라우드에서는 health체크 처리가 있어야 하니 컨트롤러에서는 서비스들이 정상 작동인지 확인할 기본 구성.
            그보다 JAVA쪽과는 달리 BaseXxxxXxx여도 abstract 적용이 유동적인게 일반적이진 않은거 같으니 관련 네이밍룰 보완 필요.
            </summary>
        </member>
        <member name="M:Interlocking.Base.BaseService.IsAvailable">
            <summary>
            C#환경에서는 쓸일이 거의 없는 체크함수.
            </summary>
            <returns>서비스의 사용가능 여부</returns>
        </member>
        <member name="M:Interlocking.Base.BaseService.IsAvailableAsync">
            <summary>
            비동기식으로 서비스 사용여부 체크.
            </summary>
            <returns>서비스의 사용가능 여부</returns>
        </member>
        <member name="T:Interlocking.Controllers.EchoController">
            <summary>
            http://localhost:5001/apis/echo
            연동된 서비스들의 기본동작 및 통신상태 확인용.
            [SwaggerTag(...)]이 EnableAnnotations옵션하고 충돌남.
            </summary>
        </member>
        <member name="M:Interlocking.Controllers.EchoController.GetAsync(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Interlocking.Controllers.EchoController.PostAsync(Interlocking.Controllers.EchoRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Interlocking.Controllers.EchoController.PostAsyncWithFiles(Interlocking.Controllers.EchoRequest,Microsoft.AspNetCore.Http.IFormFile[])">
            <inheritdoc/>
        </member>
        <member name="M:Interlocking.Controllers.EchoController.PatchAsync">
            <inheritdoc/>
        </member>
        <member name="M:Interlocking.Controllers.EchoController.PutAsync(Interlocking.Controllers.EchoRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Interlocking.Controllers.EchoController.DeleteAsync(Interlocking.Controllers.EchoRequest)">
            <inheritdoc/>
        </member>
        <member name="T:Interlocking.Controllers.EchoResponse">
            <summary>
            EchoResponse 클래스는 연동된 서비스들의 상태를 나타내는 응답 모델입니다.
            </summary>
        </member>
        <member name="P:Interlocking.Controllers.EchoResponse.RedisHealth">
            <summary>
            레디스 연결 및 기본동작 정상여부
            </summary>
        </member>
        <member name="P:Interlocking.Controllers.EchoResponse.MariaHealth">
            <summary>
            MariaDB 연결 및 기본동작 정상여부
            </summary>
        </member>
        <member name="P:Interlocking.Controllers.EchoResponse.MongoHealth">
            <summary>
            MongoDB 연결 및 기본동작 정상여부
            </summary>
        </member>
        <member name="P:Interlocking.Controllers.EchoResponse.S3Health">
            <summary>
            (TO-DO)스토리지-S3 연결 및 기본동작 정상여부
            </summary>
        </member>
        <member name="P:Interlocking.Controllers.EchoResponse.Files">
            <summary>
            (선택사항) 파일 업로드 및 조회관련
            </summary>
        </member>
        <member name="T:Interlocking.Controllers.EchoResponseExample">
            <summary>
            apis/echo 서버처리가 200.OK일때 기준 예시.
            </summary>
        </member>
        <member name="T:Interlocking.Controllers.SimpleController">
            <summary>
            http://localhost:5001/apis/simple
            ASP닷넷코어에서 제공하는 가장 간단한 API로 기본적인 구동확인용.
            [SwaggerTag(...)]이 EnableAnnotations옵션하고 충돌남.
            </summary>
        </member>
        <member name="T:Interlocking.Framwork.Setting.MariaContext">
            <summary>
            MariaDB 연결
            </summary>
        </member>
        <member name="M:Interlocking.Framwork.Setting.MariaContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            엔티티마다.  [Table("tbl_xxx")]을 쓰니 OnModelCreating에 추가작업X
            </summary>
        </member>
        <member name="T:Interlocking.Framwork.Setting.MongoSetting">
            <summary>
            appsettings.json에 등록한 몽고DB 접속정보 JSON 참조.
            </summary>
        </member>
        <member name="T:Interlocking.Global.ConstValue">
            <summary>
            상수 값 정의
            </summary>
        </member>
        <member name="F:Interlocking.Global.ConstValue.TtlTermWeek1">
            <summary>
            1주일 TTL(초 단위)
            </summary>
        </member>
        <member name="F:Interlocking.Global.ConstValue.TtlTermDay1">
            <summary>
            1일 TTL(초 단위)
            </summary>
        </member>
        <member name="F:Interlocking.Global.ConstValue.TtlTermMin5">
            <summary>
            5분 TTL(초 단위)
            </summary>
        </member>
        <member name="F:Interlocking.Global.ConstValue.UTC_OFFSET">
            <summary>
            UTC 오프셋
            </summary>
        </member>
        <member name="T:Interlocking.Global.RedisBoard">
            <summary>
            레디스 보드 보드명.
            </summary>
        </member>
        <member name="T:Interlocking.Global.EnvironmentEnum">
            <summary>
            지금은 배포환경으로만 나눴지만, 조만간 빌드타입별로도 경우의 수 늘어날 예정.
            </summary>
        </member>
        <member name="T:Interlocking.Global.Exception.GlobalExceptionHandler">
            <summary>
            GlobalException이 클린코드 방식중 가장 가독성 향상에 좋아서 사용중인데,
            JAVA하고 달리 특정 익셉션 클래스만 취급하도록 옵션 거는것이 어트리뷰트에서 안 되서 아쉽다.
            </summary>
        </member>
        <member name="T:Interlocking.Models.Daos.TblEchoEntity">
            <summary>
            관계형 테이블 통신/기본적인 CRUD 테스트에 사용.
            </summary>
        </member>
        <member name="T:Interlocking.Models.ForEcho.EchoDocument">
            <summary>
            (몽고DB)tbl_echo에 2종류 이상 도큐먼트 입력 테스트 [1/2]
            </summary>
        </member>
        <member name="T:Interlocking.Models.ForEcho.EchoType2Document">
            <summary>
            (몽고DB)tbl_echo에 2종류 이상 도큐먼트 입력 테스트 [2/2]
            </summary>
        </member>
        <member name="T:Interlocking.Models.ServiceLayer.MariaService">
            <summary>
            _id기반으로 CRUD이니 해당 서비스에서는 id:long기반 함수는 throw new NotImplementedException()로만.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Interlocking.Models.ServiceLayer.MongoMultiDocumentService" -->
    </members>
</doc>
